import { EventEmitter } from '../../stencil.core';
import "@stencil/redux";
import { Store, Unsubscribe } from "@stencil/redux";
import { addOverlay, setOptions, setLanguage, addLanguage, setConfiguration } from '../../store/actions/document';
import { fetchManifest } from '../../store/actions/manifest';
import { viewItem, toggleFullscreen, toggleDrawer } from '../../store/actions/viewport';
import { Item } from '../../models/item';
export declare class ViewerComponent {
    el: HTMLElement;
    navigationEnable: boolean;
    navigationPlacement: PlacementType;
    navigationCols: number;
    navigationRows: number;
    navigationBackgroundColor: string;
    url: string;
    language: string;
    customVideoPlayer: boolean;
    customItemProps: string[];
    preventLoadOnEmpty: boolean;
    deepzoomEnabled: boolean;
    suppressGallery: boolean;
    addLanguage: typeof addLanguage;
    addOverlayState: typeof addOverlay;
    setConfiguration: typeof setConfiguration;
    setLanguage: typeof setLanguage;
    setOptions: typeof setOptions;
    fetchManifest: typeof fetchManifest;
    viewItem: typeof viewItem;
    toggleFullscreen: typeof toggleFullscreen;
    toggleDrawer: typeof toggleDrawer;
    storeUnsubscribe: Unsubscribe;
    configuration: MyAppState["document"]["configuration"];
    theme: MyAppState["document"]["theme"];
    manifestError: MyAppState['manifest']['error'];
    manifestFetching: MyAppState['manifest']['fetching'];
    manifestFetched: MyAppState['manifest']['fetched'];
    currentItemIndex: MyAppState['viewport']['itemIndex'];
    items: MyAppState['viewport']['items'];
    fullscreen: MyAppState['viewport']['fullscreen'];
    infoShown: MyAppState['viewport']['infoShown'];
    store: Store;
    rendered: EventEmitter;
    manifestErrorOccurred: EventEmitter;
    manifestIsEmpty: EventEmitter;
    itemChanged: EventEmitter;
    itemsLoaded: EventEmitter;
    emitItemChangeEvent(newValue: number, oldValue: number): Promise<void>;
    emitItemsLoadedEvent(newValue: DocumentPage[], oldValue: DocumentPage[]): Promise<void>;
    getCurrentItem(): Promise<Item>;
    setItem(index: number): Promise<boolean>;
    getItems(): Promise<Item[]>;
    getItemCount(): Promise<number>;
    getViewportType(): Promise<ViewportType>;
    getTopBarElement(): Promise<HTMLElement>;
    getViewportElement(): Promise<HTMLElement>;
    getCustomVideoElement(): Promise<HTMLElement>;
    getNavigationElement(): Promise<HTMLElement>;
    getDrawerElement(): Promise<HTMLElement>;
    addOverlay(x: number, y: number, width: number, height: number): Promise<void>;
    handleDrawerToggle(): void;
    handleFullscreenToggleByOther(): void;
    componentWillLoad(): void;
    componentDidLoad(): void;
    componentDidUpdate(): void;
    componentDidRender(): void;
    componentDidUnload(): void;
    initCustomFlags(): void;
    initLanguage(): void;
    render(): any;
}
