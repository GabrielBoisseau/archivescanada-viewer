import { EventEmitter } from '../../stencil.core';
import { Store, Unsubscribe } from "@stencil/redux";
import { setDocumentUrl, setDocumentPages, setDocumentTitle, setAnnotations, setZoom, setPage, setDocumentAlternateFormats, setError, setStatus, clearOverlays } from "../../store/actions/document";
export declare class OpenSeadragonComponent {
    el: HTMLElement;
    overlayClick: EventEmitter;
    private resolver;
    private instance;
    private mouseTracker;
    setError: typeof setError;
    setStatus: typeof setStatus;
    setDocumentUrl: typeof setDocumentUrl;
    setDocumentPages: typeof setDocumentPages;
    setDocumentTitle: typeof setDocumentTitle;
    setDocumentAlternateFormats: typeof setDocumentAlternateFormats;
    setAnnotations: typeof setAnnotations;
    setPage: typeof setPage;
    setZoom: typeof setZoom;
    clearOverlays: typeof clearOverlays;
    storeUnsubscribe: Unsubscribe;
    document: MyAppState["document"]["document"];
    error: MyAppState["document"]["error"];
    url: MyAppState["document"]["url"];
    options: MyAppState["document"]["options"];
    overlays: MyAppState["document"]["overlays"];
    page: MyAppState["document"]["page"];
    pages: MyAppState["document"]["pages"];
    zoomRequest: MyAppState["document"]["zoomRequest"];
    store: Store;
    pageLoad: EventEmitter;
    handlePageChange(newValue: number, oldValue: number): void;
    handleUrlChange(newValue: string, oldValue: string): void;
    handleZoomRequest(newValue: DocumentZoom, oldValue: DocumentZoom): void;
    resolve(): Promise<void>;
    componentWillLoad(): void;
    componentDidLoad(): Promise<void>;
    componentDidUnload(): void;
    componentDidRender(): void;
    openseadragon(): Promise<any>;
    getOverlays(): Promise<DocumentOverlay[]>;
    handleOverlayClick(ev: MouseEvent): void;
    handleCanvasLoad(tiledImage: any, callback: () => any): void;
    create(): void;
    drawShadow(): void;
    drawOverlays(): any;
    render(): any;
}
